#include <iostream>
#include <vector>
using namespace std;

// ========================================================
// üß© C·∫•u tr√∫c Node (n√∫t) c·ªßa danh s√°ch li√™n k·∫øt ƒë∆°n
// ========================================================
class ListNode {
public:
    int val;            // Gi√° tr·ªã l∆∞u trong n√∫t
    ListNode* next;     // Con tr·ªè tr·ªè ƒë·∫øn n√∫t k·∫ø ti·∫øp trong danh s√°ch

    // Constructor 1: Kh·ªüi t·∫°o n√∫t v·ªõi gi√° tr·ªã v√† con tr·ªè = nullptr
    ListNode(int val) : val(val), next(nullptr) {}

    // Constructor 2: Kh·ªüi t·∫°o n√∫t v√† ch·ªâ ƒë·ªãnh lu√¥n n√∫t ti·∫øp theo
    ListNode(int val, ListNode* next) : val(val), next(next) {}
};

// ========================================================
// üìò L·ªõp LinkedList: Qu·∫£n l√Ω danh s√°ch li√™n k·∫øt ƒë∆°n
// ========================================================
class LinkedList {
private:
    ListNode* head; // Con tr·ªè ƒë·∫ßu danh s√°ch (d√πng dummy node ƒë·ªÉ d·ªÖ x·ª≠ l√Ω)
    ListNode* tail; // Con tr·ªè tr·ªè ƒë·∫øn n√∫t cu·ªëi c√πng

public:
    // ======= H√†m kh·ªüi t·∫°o danh s√°ch =======
    LinkedList() {
        head = new ListNode(-1); // Dummy head: kh√¥ng ch·ª©a d·ªØ li·ªáu th·ª±c, ch·ªâ l√†m g·ªëc
        tail = head;             // L√∫c ƒë·∫ßu, tail tr·ªè c√πng head (v√¨ danh s√°ch r·ªóng)
    }

    // ========================================================
    // üîç L·∫•y gi√° tr·ªã t·∫°i v·ªã tr√≠ index (0-based)
    // Tr·∫£ v·ªÅ -1 n·∫øu index kh√¥ng h·ª£p l·ªá
    // ========================================================
    int get(int index) {
        ListNode* curr = head->next; // B·∫Øt ƒë·∫ßu t·ª´ n√∫t ƒë·∫ßu ti√™n th·∫≠t s·ª±
        int i = 0;
        while (curr != nullptr) {
            if (i == index) return curr->val; // N·∫øu ƒë·∫øm ƒë·ªß index th√¨ tr·∫£ v·ªÅ gi√° tr·ªã
            i++;
            curr = curr->next;
        }
        return -1; // N·∫øu index v∆∞·ª£t gi·ªõi h·∫°n
    }

    // ========================================================
    // ‚ûï Ch√®n ph·∫ßn t·ª≠ v√†o ƒë·∫ßu danh s√°ch (sau dummy head)
    // ========================================================
    void insertHead(int val) {
        // T·∫°o n√∫t m·ªõi
        ListNode* newNode = new ListNode(val);

        // N·ªëi n√∫t m·ªõi v√†o ƒë·∫ßu danh s√°ch
        newNode->next = head->next;
        head->next = newNode;

        // N·∫øu tr∆∞·ªõc ƒë√≥ danh s√°ch r·ªóng ‚Üí c·∫≠p nh·∫≠t tail
        if (newNode->next == nullptr) tail = newNode;
    }

    // ========================================================
    // ‚ûï Ch√®n ph·∫ßn t·ª≠ v√†o cu·ªëi danh s√°ch
    // ========================================================
    void insertTail(int val) {
        tail->next = new ListNode(val); // T·∫°o n√∫t m·ªõi v√† n·ªëi v√†o cu·ªëi
        tail = tail->next;              // C·∫≠p nh·∫≠t tail tr·ªè ƒë·∫øn n√∫t m·ªõi
    }

    // ========================================================
    // ‚ùå X√≥a ph·∫ßn t·ª≠ t·∫°i v·ªã tr√≠ index
    // Tr·∫£ v·ªÅ true n·∫øu x√≥a th√†nh c√¥ng, false n·∫øu kh√¥ng t√¨m th·∫•y
    // ========================================================
    bool remove(int index) {
        int i = 0;
        ListNode* curr = head; // Duy·ªát t·ª´ dummy head
        while (i < index && curr != nullptr) {
            i++;
            curr = curr->next;
        }

        // N·∫øu curr h·ª£p l·ªá v√† c√≥ n√∫t k·∫ø ti·∫øp ƒë·ªÉ x√≥a
        if (curr != nullptr && curr->next != nullptr) {
            // N·∫øu n√∫t b·ªã x√≥a l√† n√∫t cu·ªëi ‚Üí c·∫≠p nh·∫≠t tail
            if (curr->next == tail) tail = curr;

            // Gi·∫£i ph√≥ng b·ªô nh·ªõ cho n√∫t c·∫ßn x√≥a
            ListNode* toDelete = curr->next;
            curr->next = curr->next->next;
            delete toDelete;
            return true;
        }
        return false; // Kh√¥ng t√¨m th·∫•y v·ªã tr√≠ h·ª£p l·ªá
    }

    // ========================================================
    // üñ®Ô∏è In to√†n b·ªô danh s√°ch ra m√†n h√¨nh
    // ========================================================
    void printList() {
        ListNode* curr = head->next;
        cout << "Danh sach hien tai: ";
        while (curr != nullptr) {
            cout << curr->val << " "; // In gi√° tr·ªã t·ª´ng n√∫t
            curr = curr->next;
        }
        cout << endl;
    }
};

// ========================================================
// üöÄ H√†m main: Giao di·ªán nh·∫≠p l·ªánh t·ª´ ng∆∞·ªùi d√πng
// ========================================================
int main() {
    LinkedList list; // T·∫°o danh s√°ch r·ªóng ban ƒë·∫ßu
    int choice;      // L∆∞u l·ª±a ch·ªçn menu c·ªßa ng∆∞·ªùi d√πng

    do {
        // ======= Hi·ªÉn th·ªã menu =======
        cout << "\n===== MENU =====\n";
        cout << "1. Chen vao dau danh sach\n";
        cout << "2. Chen vao cuoi danh sach\n";
        cout << "3. Lay gia tri tai vi tri\n";
        cout << "4. Xoa phan tu tai vi tri\n";
        cout << "5. In danh sach\n";
        cout << "0. Thoat\n";
        cout << "================\n";
        cout << "Nhap lua chon: ";
        cin >> choice;

        // ======= X·ª≠ l√Ω l·ª±a ch·ªçn =======
        if (choice == 1) {
            int val;
            cout << "Nhap gia tri can chen vao dau: ";
            cin >> val;
            list.insertHead(val);
        }
        else if (choice == 2) {
            int val;
            cout << "Nhap gia tri can chen vao cuoi: ";
            cin >> val;
            list.insertTail(val);
        }
        else if (choice == 3) {
            int index;
            cout << "Nhap vi tri can lay: ";
            cin >> index;
            int value = list.get(index);
            if (value == -1)
                cout << "Khong ton tai vi tri nay!\n";
            else
                cout << "Gia tri tai vi tri " << index << " la: " << value << endl;
        }
        else if (choice == 4) {
            int index;
            cout << "Nhap vi tri can xoa: ";
            cin >> index;
            if (list.remove(index))
                cout << "Da xoa thanh cong.\n";
            else
                cout << "Khong ton tai vi tri nay!\n";
        }
        else if (choice == 5) {
            list.printList();
        }
        else if (choice == 0) {
            cout << "Thoat chuong trinh.\n";
        }
        else {
            cout << "Lua chon khong hop le!\n";
        }

    } while (choice != 0);

    return 0;
}
